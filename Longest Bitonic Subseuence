Intuition
Find the Longest Increasing Subsequence (LIS) for each index

lis[i] stores the length of the longest increasing subsequence ending at i.
Find the Longest Decreasing Subsequence (LDS) for each index

lds[i] stores the length of the longest decreasing subsequence starting from i.
Find the Maximum of lis[i] + lds[i] - 1

Since i is counted twice (once in LIS and once in LDS), subtract 1.

class Solution {
    public int longestBitonicSubsequence(int[] nums) {
        int n = nums.length;
        if (n == 0) return 0;

        int[] lis = new int[n];
        int[] lds = new int[n];

        // Step 1: Compute LIS for every index
        Arrays.fill(lis, 1);
        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] > nums[j] && lis[i] < lis[j] + 1) {
                    lis[i] = lis[j] + 1;
                }
            }
        }

        // Step 2: Compute LDS for every index
        Arrays.fill(lds, 1);
        for (int i = n - 2; i >= 0; i--) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] > nums[j] && lds[i] < lds[j] + 1) {
                    lds[i] = lds[j] + 1;
                }
            }
        }

        // Step 3: Compute max of lis[i] + lds[i] - 1
        int maxBitonic = 0;
        for (int i = 0; i < n; i++) {
            maxBitonic = Math.max(maxBitonic, lis[i] + lds[i] - 1);
        }

        return maxBitonic;
    }
}
