Approach
Sorting by Length

We first sort the words based on their lengths. This is necessary because a word can only be formed by adding a letter to a smaller word.
Sorting helps ensure that when checking for chains, we process smaller words first.
Dynamic Programming (DP) with lis[] Array

We maintain a lis[] array (Longest Increasing Subsequence concept), where lis[i] stores the longest chain ending at words[i].
Initially, each word is its own chain (lis[i] = 1 for all i).
Nested Loops to Build Chains

We iterate over all words (i) and check all previous words (j).
If words[j] can form words[i] by inserting one character (checkPossible function), then we update lis[i] = lis[j] + 1.
Finding the Maximum Chain Length

The answer is the maximum value in the lis[] array.
Understanding checkPossible Function
This function checks if s1 can be formed by adding exactly one character to s2.

Uses two pointers (first for s1, second for s2).
Tries to match all characters of s2 inside s1, allowing for one extra character in s1.
Returns true if s2 is completely matched.
Time Complexity Analysis
Sorting → O(n log n)
Nested Loops (O(n²))
Each word is compared with all smaller words.
The checkPossible function runs in O(m) (where m is max word length).
Total Complexity → O(n² * m)

class Solution {

    boolean checkPossible(String s1, String s2) {
        if(s1.length() != s2.length() + 1) {
            return false;
        }
        int first = 0;
        int second= 0;

        while(first < s1.length()) {
            if(second < s2.length() && s1.charAt(first) == s2.charAt(second)) {
                first++;
                second++;
            } else {
                first++;
            }
        }

        if(first == s1.length() && second == s2.length()) {
            return true;
        }
        return false;
        
    }

    public int longestStrChain(String[] words) {

        Arrays.sort(words, Comparator.comparingInt(String::length));
        int n = words.length;

        int[] lis = new int[n];
        for(int i=0; i< words.length; i++) {
            lis[i] = 1;
        }

        for(int i = 1; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(checkPossible(words[i], words[j]) && lis[i] < lis[j] + 1) {
                    lis[i] = lis[j] + 1;
                }
            }
        }

        int maxi = 1;
        for(int i=0; i<n; i++) {
            maxi = Math.max(maxi, lis[i]);
        }

        return maxi;
    }
}
