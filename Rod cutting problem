Input: price[] = [3, 5, 8, 9, 10, 17, 17, 20]
Output: 24
Explanation: The maximum obtainable value is 24 by cutting the rod into 8 pieces of length 1, i.e, 8*price[1]= 8*3 = 24.

Problem Breakdown

Given an array price[] where price[i] represents the price of a rod of length i + 1.
The goal is to find the maximum revenue possible by cutting the rod into different lengths.
Recursive Approach with Memoization (Top-Down DP)

State Definition: cutRodForProfit(price, n, w, t)

n: Number of available rod lengths.
w: Remaining length of the rod.
t[][]: Memoization table to store intermediate results.
Base Case:

If n == 0 or w == 0, return 0 (No profit if there's no rod left to cut).
Recursive Case:

If the current rod length n is less than or equal to the remaining length w, we have two choices:
Include the rod: Take price price[n-1] and reduce w by n.
Exclude the rod: Move to the next rod length (n-1).
Store the maximum value in t[n][w].
Otherwise, if n > w, move to the next length (n-1).
Time Complexity: O(n²)

Each subproblem (n, w) is computed once and stored in t[n][w].
Space Complexity: O(n²)



class Solution {
    public int cutRod(int[] price) {
        // code here
        int n = price.length;
        int w = price.length;
        int[][] t = new int[n+1][w+1];
        for(int i = 0; i< t.length; i++) {
            for(int j=0; j<t[0].length; j++) {
                t[i][j] = -1;
            }
        }
        int profit = cutRodForProfit(price, n, w , t);
        return profit;
    }
    
    public int cutRodForProfit(int[] price, int n, int w, int[][] t) {
        if(n ==0 || w ==0) {
            return 0;
        }
        
        if (t[n][w] != -1) return t[n][w];
        
        if(n <= w) {
            t[n][w] = Math.max(cutRodForProfit(price, n , w -n, t) + price[n-1],
                        cutRodForProfit(price, n - 1, w, t));
        } else {
            t[n][w] = cutRodForProfit(price, n -1 , w, t);
        }
        return t[n][w];
    }
     
}
